scalar JSON

enum JobStatus { queued active completed failed stalled delayed waiting }
enum JobType { reindexProject reclassifyLowConfidence generateCallSheet extractContent custom }

type AgentJob {
  id: ID!
  organizationId: ID!
  type: JobType!
  target: String
  status: JobStatus!
  priority: Int
  attemptsMade: Int
  retries: Int
  worker: String
  startedAt: String
  finishedAt: String
  durationMs: Int
  params: JSON
}

type Runbook {
  id: ID!
  organizationId: ID!
  name: String!
  description: String
  spec: JSON!
  createdAt: String!
  updatedAt: String!
}

type QueueStats {
  name: String!
  waiting: Int!
  active: Int!
  completed: Int!
  failed: Int!
  delayed: Int!
}

type AgentHealth {
  status: String!
  agents: [String!]!
}

input EnqueueAgentJobInput {
  organizationId: ID!
  type: JobType!
  target: String
  priority: Int
  params: JSON
}

input RunbookInput {
  organizationId: ID!
  name: String!
  description: String
  spec: JSON!
}

input SaveRunbookInput {
  id: ID
  organizationId: ID!
  name: String!
  description: String
  spec: JSON!
}

type Query {
  agentJobs(organizationId: ID!, status: JobStatus, type: JobType, limit: Int, offset: Int): [AgentJob!]!
  agentJob(organizationId: ID!, id: ID!): AgentJob
  runbooks(organizationId: ID!): [Runbook!]!
  agentHealth(organizationId: ID!): AgentHealth!
  queues(organizationId: ID!): [QueueStats!]!
}

type Mutation {
  enqueueAgentJob(input: EnqueueAgentJobInput!): AgentJob!
  cancelAgentJob(organizationId: ID!, id: ID!): Boolean!
  executeRunbook(organizationId: ID!, id: ID!, params: JSON): AgentJob!
  saveRunbook(organizationId: ID!, input: SaveRunbookInput!): Runbook!
}

type LogEntry {
  jobId: ID!
  timestamp: String!
  level: String!
  message: String!
}

type Subscription {
  jobUpdated(organizationId: ID!): AgentJob!
  jobLogAppended(jobId: ID!): LogEntry!
}


