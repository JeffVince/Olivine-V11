version: '3.8'

services:
  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.10
    container_name: olivine-neo4j
    ports:
      - "7474:7474"   # HTTP browser interface
      - "7687:7687"   # Bolt driver connection
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_server_memory_heap_initial__size=512m
      - NEO4J_server_memory_heap_max__size=2g
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:7474"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # PostgreSQL Relational Database
  postgres:
    image: postgres:15
    container_name: olivine-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=olivine
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: olivine-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Olivine Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: olivine-backend
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=olivine
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - /app/node_modules
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Olivine Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: olivine-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    command: npm run dev -- --host

volumes:
  neo4j_data:
    name: olivine-neo4j-data
  neo4j_logs:
    name: olivine-neo4j-logs
  postgres_data:
    name: olivine-postgres-data
  redis_data:
    name: olivine-redis-data